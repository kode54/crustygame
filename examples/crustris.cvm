include crustygame.inc
include fills.inc
include videomode.inc
include timers.inc
binclude gfx ints "crustris.crsg"

expr INITIAL_CHANGE_RATE 500
expr INPUT_RATE 50
expr TAP_DELAY 2

macro SET_VIDEO_MODE
    static videomode string VIDEOMODE
    expr VIDEO_MODE_SET 1
endmacro SET_VIDEO_MODE

macro SET_DEFAULT_VIDEO_MODE
    static videomode string "640x480"
endmacro SET_DEFAULT_VIDEO_MODE

if VIDEOMODE SET_VIDEO_MODE
expr VIDEO_MODE_NOT_SET "VIDEO_MODE_SET ^ 1"
if VIDEO_MODE_NOT_SET SET_DEFAULT_VIDEO_MODE

expr TILE_SIDE 16

expr SCREEN_WIDTH 640
expr SCREEN_HEIGHT 480
expr SCREEN_TILES_WIDTH "SCREEN_WIDTH / TILE_SIDE"
expr SCREEN_TILES_HEIGHT "SCREEN_HEIGHT / TILE_SIDE"
macro RESCALE_POS XPOS YPOS
    mul XPOS global_scale
    mul YPOS global_scale
    add XPOS global_offset:0
    add YPOS global_offset:1
endmacro RESCALE_POS

; assure collision masking works.
static pieces ints "\
255 255 255 \
0   255 0 \
0   255 \
255 255 \
0   255 \
0   255 0 \
255 255 255 \
255 0 \
255 255 \
255 0 \
255 255 255 \
0   0   255 \
0   255 \
0   255 \
255 255 \
255 0   0 \
255 255 255 \
255 255 \
255 0 \
255 0 \
255 255 0 \
0   255 255 \
0   255 \
255 255 \
255 0 \
255 255 \
255 255 \
0   255 255 \
255 255 0 \
255 0 \
255 255 \
0   255 \
255 255 255 \
255 0   0 \
255 255 \
0   255 \
0   255 \
0   0   255 \
255 255 255 \
255 0 \
255 0 \
255 255 \
255 \
255 \
255 \
255 \
255 255 255 255"
expr PIECEINFO_PIECES    7
expr PIECEINFO_ROTATIONS 4
expr PIECEINFO_OFFSET 0
expr PIECEINFO_WIDTH  1
expr PIECEINFO_HEIGHT 2
expr PIECEINFO_SIZE   3
expr PIECEINFO_PIECE_SIZE "PIECEINFO_SIZE * PIECEINFO_ROTATIONS"
static pieceinfo ints "\
  0 0 0    0 0 0    0 0 0    0 0 0 \
  0 3 2    6 2 3   12 3 2   18 2 3 \
 24 3 2   30 2 3   36 3 2   42 2 3 \
 48 3 2   54 2 3   48 3 2   54 2 3 \
 60 2 2   60 2 2   60 2 2   60 2 2 \
 64 3 2   70 2 3   64 3 2   70 2 3 \
 76 3 2   82 2 3   88 3 2   94 2 3 \
100 1 4  104 4 1  100 1 4  104 4 1"

expr PIT_WIDTH 10
expr PIT_HEIGHT 20
expr PIT_SIZE "PIT_WIDTH * PIT_HEIGHT"
static pit ints PIT_SIZE
static pit_map0_tiles ints PIT_SIZE
static pit_map1_tiles ints PIT_SIZE
static pit_map2_tiles ints PIT_SIZE
static pit_map0_colormod ints PIT_SIZE
static pit_map1_colormod ints PIT_SIZE
static pit_map2_colormod ints PIT_SIZE
expr PIT_BG_WIDTH  "PIT_WIDTH + 2"
expr PIT_BG_HEIGHT "PIT_HEIGHT + 2"
expr PIT_BG_SIZE   "PIT_BG_WIDTH * PIT_BG_HEIGHT"
expr PIT_TILE_CORNER 4
expr PIT_TILE_EDGE   5
expr PIT_TILE_FILL   3
; C_PIT_FILL
TILEMAP_COLOR PIT_FILL 160 160 160 127
expr CLEAR_TILE      1
expr SOLID_TILE      0

static PIECE_TILEMAP ints "CLEAR_TILE CLEAR_TILE CLEAR_TILE 0 \
                           0  6  7 0 \
                           0  8  9 0 \
                           0 10 11 0 \
                           0 12 13 0 \
                           0 14 15 0 \
                           0 16 17 0 \
                           0 18 19 0"
; Probably should be power of two
static TILEMAP_WIDTH 4
static TILEMAP_HEIGHT 8
TILEMAP_COLOR  C   0 170 170 255
TILEMAP_COLOR  Y 170 170   0 255
TILEMAP_COLOR  P 170   0 170 255
TILEMAP_COLOR  G   0 170   0 255
TILEMAP_COLOR  R 170   0   0 255
TILEMAP_COLOR  B   0   0 170 255
TILEMAP_COLOR  O 170  85   0 255
TILEMAP_COLOR LC  85 255 255 255
TILEMAP_COLOR LY 255 255  85 255
TILEMAP_COLOR LP 255  85 255 255
TILEMAP_COLOR LG  85 255  85 255
TILEMAP_COLOR LR 255  85  85 255
TILEMAP_COLOR LB  85  85 255 255
TILEMAP_COLOR LO 255 170  85 255
TILEMAP_COLOR  W 255 255 255 255
; 0th is no block
static PIECE_COLORMOD ints "0 0 0 0 \
                            C_C C_LC C_W 0 \
                            C_Y C_LY C_W 0 \
                            C_P C_LP C_W 0 \
                            C_G C_LG C_W 0 \
                            C_R C_LR C_W 0 \
                            C_B C_LB C_W 0 \
                            C_O C_LO C_W 0"

proc populate_piece_values piece pos width height
    move pos    piece:PIECEINFO_OFFSET
    move width  piece:PIECEINFO_WIDTH
    move height piece:PIECEINFO_HEIGHT
ret

proc populate_piece_values2 piece rotation pos width height
    local pieceptr
    local rotationptr

    ; copy values to locals to not mutate caller variables
    move pieceptr piece
    mul  pieceptr PIECEINFO_PIECE_SIZE
    move rotationptr rotation
    mul  rotationptr PIECEINFO_SIZE
    add  pieceptr rotationptr
    call populate_piece_values pieceinfo:pieceptr pos width height
ret
 
proc piece_would_collide collided piece rotation x y
    local piecex
    local pos
    local width
    local height
    local pitpos
    local block
    local maxx
    local maxy

    call populate_piece_values2 piece rotation pos width height

    move collided 1
    cmp x 0
    jumpl collision
    move maxx PIT_WIDTH
    sub  maxx width
    cmp  x    maxx
    jumpg collision
    move maxy PIT_HEIGHT
    sub  maxy height
    cmp  y    maxy
    jumpg collision
    move collided 0

    ; initial pit position
    move pitpos y
    mul  pitpos PIT_WIDTH
    add  pitpos x

    label y
        move piecex width

        label x
            move block pieces:pos
            move collided pit:pitpos
            and  collided block
            jumpz no_collision
            ; collided will be non-zero
            jump collision
            label no_collision

            add pos 1
            add pitpos 1
            sub piecex 1
        jumpg x

        sub pitpos width
        add pitpos PIT_WIDTH
        sub height 1
    jumpg y

    label collision
ret

proc update_pit_map piece rotation x y
    local piecex
    local pos
    local width
    local height
    local pitpos

    call populate_piece_values2 piece rotation pos width height

    ; initial pit position
    move pitpos y
    mul  pitpos PIT_WIDTH
    add  pitpos x

    label y
        move piecex width

        label x
            cmp pieces:pos 0
            jumpz no_update
                move pit:pitpos piece
            label no_update

            add pos 1
            add pitpos 1
            sub piecex 1
        jumpg x

        ; advance to the next row of the pit
        sub pitpos width
        add pitpos PIT_WIDTH
        sub height 1
    jumpg y
ret

proc update_pit_tilemaps x y w h
    local i
    local j
    local startptr
    local ptr
    local pitval

    move startptr y
    mul  startptr PIT_WIDTH
    add  startptr x

    move ptr startptr
    move j h
    label y
        move i w
        label x
            move pitval pit:ptr
            mul  pitval TILEMAP_WIDTH
            move pit_map0_tiles:ptr PIECE_TILEMAP:pitval
            move pit_map0_colormod:ptr PIECE_COLORMOD:pitval
            add  pitval 1
            move pit_map1_tiles:ptr PIECE_TILEMAP:pitval
            move pit_map1_colormod:ptr PIECE_COLORMOD:pitval
            add  pitval 1
            move pit_map2_tiles:ptr PIECE_TILEMAP:pitval
            move pit_map2_colormod:ptr PIECE_COLORMOD:pitval
            sub  pitval 2

            add ptr 1
            sub i 1
        jumpg x
        sub ptr w
        add ptr PIT_WIDTH
        sub j 1
    jumpg y

    ; set tiles and attributes then update
    call gfx_set_tilemap_map3 pit_tilemap_id0 pit_map0_tiles:startptr x y PIT_WIDTH w h
    call gfx_set_tilemap_attr_colormod3 pit_tilemap_id0 pit_map0_colormod:startptr x y PIT_WIDTH w h
    call gfx_update_tilemap2 pit_tilemap_id0 x y w h
    call gfx_set_tilemap_map3 pit_tilemap_id1 pit_map1_tiles:startptr x y PIT_WIDTH w h
    call gfx_set_tilemap_attr_colormod3 pit_tilemap_id1 pit_map1_colormod:startptr x y PIT_WIDTH w h
    call gfx_update_tilemap2 pit_tilemap_id1 x y w h
    call gfx_set_tilemap_map3 pit_tilemap_id2 pit_map2_tiles:startptr x y PIT_WIDTH w h
    call gfx_set_tilemap_attr_colormod3 pit_tilemap_id2 pit_map2_colormod:startptr x y PIT_WIDTH w h
    call gfx_update_tilemap2 pit_tilemap_id2 x y w h
ret

proc update_pit_tilemaps_from_piece piece rotation x y
    local pos
    local width
    local height

    call populate_piece_values2 piece rotation pos width height
    call update_pit_tilemaps x y width height
ret

proc draw_pit
    move gfx_draw_layer pit_background_layer_id
    move gfx_draw_layer pit_layer_id0
    move gfx_draw_layer pit_layer_id1
    move gfx_draw_layer pit_layer_id2
ret

proc draw_piece layer_id piece rotation x y
    local scaledx
    local scaledy
    local piecex
    local pos
    local width
    local height
    local window ints 2
    local position floats "0.0 0.0"
    local intPosition ints 2
    local scaled_tile floats 0.0

    call populate_piece_values2 piece rotation pos width height

    ; initial tilemap position
    move window:1 piece
    mul  window:1 TILE_SIDE 

    ; size of a tile in float which will be used to accumulate location
    move scaled_tile TILE_SIDE
    mul  scaled_tile global_scale

    ; get the starting scaled position
    move scaledx x
    mul  scaledx global_scale
    add  scaledx global_offset:0
    move scaledy y
    mul  scaledy global_scale
    add  scaledy global_offset:1

    ; get initial y position
    move position:1 scaledy
 
    label y
        ; copy in to a storage useful by gfx
        move intPosition:1 position:1

        ; get initial x position
        move position:0 scaledx
        move piecex width
        label x
            cmp pieces:pos 0
            jumpz nodraw

            ; copy to an int to be useful by gfx
            move intPosition:0 position:0
            move gfx_set_layer_pos:layer_id intPosition
            move window:0 0
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            add  window:0 TILE_SIDE
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            add  window:0 TILE_SIDE
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            label nodraw

            ; advance table pointer
            add pos 1
            ; calculate next x position
            add position:0 scaled_tile
            sub piecex 1
        jumpg x

        ; calculate next y position
        add position:1 scaled_tile
        sub height 1
    jumpg y 
ret

static gfx_id
static block_tilemap_id
static block_layer_id
static pit_tilemap_id0
static pit_tilemap_id1
static pit_tilemap_id2
static pit_layer_id0
static pit_layer_id1
static pit_layer_id2
static pit_background_id
static pit_background_layer_id
static window_background_id
static window_background_layer_id
static global_scale floats "0.0 0.0"
static global_offset ints 2

expr OBJ_ID   0
expr OBJ_X    1
expr OBJ_Y    2
expr OBJ_SIZE 3
expr BLOCK_OBJ  0
expr PIT0_OBJ   1
expr PIT1_OBJ   2
expr PIT2_OBJ   3
expr PIT_BG_OBJ 4
expr WIN_BG_OBJ 5
expr TOTAL_OBJ  6
expr OBJ_MEM "TOTAL_OBJ * OBJ_SIZE"
static objects ints OBJ_MEM

proc set_obj_id obj id
    local objptr

    move objptr obj
    mul  objptr OBJ_SIZE

    ; avoid another call because OBJ_ID is already 0
    move objects:objptr id
ret

proc do_obj_pos ptr x y
    move ptr:OBJ_X x
    move ptr:OBJ_Y y
ret

proc set_obj_pos obj x y
    local objptr

    move objptr obj
    mul  objptr OBJ_SIZE

    call do_obj_pos objects:objptr x y
ret

proc do_update_obj_scale ptr
    local pos ints 2
    local id

    move pos:0 ptr:OBJ_X
    move pos:1 ptr:OBJ_Y
    RESCALE_POS pos:0 pos:1
    move id    ptr:OBJ_ID
    move gfx_set_layer_pos:id pos
    move gfx_set_layer_scale:id global_scale
ret
    
proc update_obj_scales
    local objptr  OBJ_MEM
    sub   objptr  OBJ_SIZE

    label loop
        call do_update_obj_scale objects:objptr
        sub objptr OBJ_SIZE
    jumpg loop
    jumpz loop
ret

static pitxpos
static pitypos

proc update_scale
    local tempf floats "0.0 0.0 0.0 0.0"
    local temp ints 2

    move tempf:0 gfx_get_width
    move tempf:1 gfx_get_height
    div  tempf:0 SCREEN_WIDTH
    div  tempf:1 SCREEN_HEIGHT
    cmp  tempf:0 tempf:1
    jumpl scale_taller
    jumpg scale_wider
    ; scale equal, keep offset 0
    move global_scale:0 tempf:0
    move global_scale:1 tempf:0
    label scale_taller
    ; center vertically
    move global_scale:0 tempf:0
    move global_scale:1 tempf:0
    mul  tempf:0 SCREEN_HEIGHT
    move global_offset:1 gfx_get_height
    sub  global_offset:1 tempf:0
    div  global_offset:1 2
    move global_offset:0 0
    jump scale_done
    label scale_wider
    ; center horizontally
    move global_scale:0 tempf:1
    move global_scale:1 tempf:1
    mul  tempf:1 SCREEN_WIDTH
    move global_offset:0 gfx_get_width
    sub  global_offset:0 tempf:1
    div  global_offset:0 2
    move global_offset:1 0
    label scale_done

    ; center the pit
    move tempf:0 SCREEN_WIDTH
    move tempf:2 PIT_WIDTH
    mul  tempf:2 TILE_SIDE
    sub  tempf:0 tempf:2
    div  tempf:0 2
    move tempf:1 SCREEN_HEIGHT
    move tempf:2 PIT_HEIGHT
    mul  tempf:2 TILE_SIDE
    sub  tempf:1 tempf:2
    div  tempf:1 2
    move tempf:2 tempf:0
    move tempf:3 tempf:1
    sub  tempf:2 TILE_SIDE
    sub  tempf:3 TILE_SIDE
    move pitxpos tempf:0
    move pitypos tempf:1
    call set_obj_pos PIT0_OBJ pitxpos pitypos
    call set_obj_pos PIT1_OBJ pitxpos pitypos
    call set_obj_pos PIT2_OBJ pitxpos pitypos
    move temp:0 tempf:2
    move temp:1 tempf:3
    call set_obj_pos PIT_BG_OBJ temp:0 temp:1

    call update_obj_scales
ret

static change_rate INITIAL_CHANGE_RATE
expr FPS_TIMER_ID 0
expr PIECE_TIMER_ID 1
expr INPUT_TIMER_ID 2

proc init
    local temp ints 4
    local tempf floats "0.0 0.0"
    local pitbg ints PIT_BG_SIZE 
    local pitflags ints PIT_BG_SIZE 
    local pitcolormod ints PIT_BG_SIZE
    local row ints SCREEN_TILES_WIDTH
    local rowcolormod ints SCREEN_TILES_WIDTH

    call set_video_mode temp videomode
    cmp temp 0
    jumpn mode_ok
    move set_running 0
    jump end
    label mode_ok

    move temp:0 gfx:CRSG_OFFSET_WIDTH
    mul  temp:0 TILEMAP_PIXEL_BYTES
    call gfx_add_tileset gfx:CRSG_OFFSET_DATA gfx:CRSG_OFFSET_WIDTH gfx:CRSG_OFFSET_HEIGHT temp:0 TILE_SIDE TILE_SIDE gfx_id

    call gfx_add_tilemap TILEMAP_WIDTH TILEMAP_HEIGHT block_tilemap_id
    move gfx_set_tilemap_tileset:block_tilemap_id gfx_id
    call gfx_set_tilemap_map block_tilemap_id PIECE_TILEMAP
    call gfx_set_tilemap_attr_colormod block_tilemap_id PIECE_COLORMOD
    call gfx_update_tilemap block_tilemap_id
    call gfx_add_layer block_tilemap_id block_layer_id
    call set_obj_id BLOCK_OBJ block_layer_id
    move temp:0 TILE_SIDE
    move temp:1 TILE_SIDE
    move gfx_set_layer_window:block_layer_id temp
    call gfx_add_tilemap PIT_BG_WIDTH PIT_BG_HEIGHT pit_background_id
    move gfx_set_tilemap_tileset:pit_background_id gfx_id
    call gfx_add_layer pit_background_id pit_background_layer_id
    call set_obj_id PIT_BG_OBJ pit_background_layer_id

    call gfx_add_tilemap PIT_WIDTH PIT_HEIGHT pit_tilemap_id0
    move gfx_set_tilemap_tileset:pit_tilemap_id0 gfx_id
    call gfx_add_layer pit_tilemap_id0 pit_layer_id0
    call set_obj_id PIT0_OBJ pit_layer_id0
    call gfx_add_tilemap PIT_WIDTH PIT_HEIGHT pit_tilemap_id1
    move gfx_set_tilemap_tileset:pit_tilemap_id1 gfx_id
    call gfx_add_layer pit_tilemap_id1 pit_layer_id1
    call set_obj_id PIT1_OBJ pit_layer_id1
    call gfx_add_tilemap PIT_WIDTH PIT_HEIGHT pit_tilemap_id2
    move gfx_set_tilemap_tileset:pit_tilemap_id2 gfx_id
    call gfx_add_layer pit_tilemap_id2 pit_layer_id2
    call set_obj_id PIT2_OBJ pit_layer_id2
  
    ; don't really care that pit* aren't static because the background is only
    ; set up once and it doesn't matter if the pointer becomes invalid.
    call fill_with_border pitbg PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_FILL PIT_TILE_EDGE PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_CORNER
    call gfx_set_tilemap_map pit_background_id pitbg
    call fill_with_border pitflags PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH 0 0 TILEMAP_HFLIP_MASK TILEMAP_ROTATE_90 0 TILEMAP_ROTATE_90 TILEMAP_VFLIP_MASK 0 TILEMAP_BFLIP_MASK
    call gfx_set_tilemap_attr_flags pit_background_id pitflags
    call fill_with_border pitcolormod PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH C_W C_W C_W C_W C_PIT_FILL C_W C_W C_W C_W
    call gfx_set_tilemap_attr_colormod pit_background_id pitcolormod
    call gfx_update_tilemap pit_background_id
    
    call gfx_add_tilemap SCREEN_TILES_WIDTH SCREEN_TILES_HEIGHT window_background_id
    move gfx_set_tilemap_tileset:window_background_id gfx_id
    call gfx_add_layer window_background_id window_background_layer_id
    call set_obj_id WIN_BG_OBJ window_background_layer_id
    call set_obj_pos WIN_BG_OBJ 0 0

    call fill row SCREEN_TILES_WIDTH 1 SCREEN_TILES_WIDTH SOLID_TILE
    ; pitch = 0 so the same row is copied for each row
    call gfx_set_tilemap_map3 window_background_id row 0 0 0 SCREEN_TILES_WIDTH SCREEN_TILES_HEIGHT
    call fill rowcolormod SCREEN_TILES_WIDTH 1 SCREEN_TILES_WIDTH C_B
    call gfx_set_tilemap_attr_colormod3 window_background_id rowcolormod 0 0 0 SCREEN_TILES_WIDTH SCREEN_TILES_HEIGHT
    call gfx_update_tilemap window_background_id
    
    ; update the whole pit
    call update_pit_tilemaps 0 0 PIT_WIDTH PIT_HEIGHT

    call update_scale

    call set_timer_rate FPS_TIMER_ID 1000
    call set_timer_rate PIECE_TIMER_ID change_rate
    call set_timer_rate INPUT_TIMER_ID INPUT_RATE
    label end
ret

static fps

proc count_fps
    local elapsed

    call check_timer elapsed FPS_TIMER_ID
    cmp elapsed 0
    jumpz fps_continue
    move err fps
    move err NL
    move fps 0

    label fps_continue
    add fps 1
ret

proc pit_effect
    local piece
    local rotation
    local width
    local height
    local pos
    local maxx
    local maxy
    local x
    local y

    move piece get_random
    mod  piece PIECEINFO_PIECES
    add  piece 1
    move rotation get_random
    mod  rotation PIECEINFO_ROTATIONS

    call populate_piece_values2 piece rotation pos width height

    move maxx PIT_WIDTH
    sub  maxx width
    add  maxx 1
    move maxy PIT_HEIGHT
    sub  maxy height
    add  maxy 1
    move x get_random
    mod  x maxx
    move y get_random
    mod  y maxy

    call update_pit_map piece rotation x y
    call update_pit_tilemaps_from_piece piece rotation x y
ret

static curpiece 0
static currotation
static xpos 0
static ypos 0
static move 0
static tapped 0
static held 0
static fall 0

proc frame
    local curTick
    local width
    local height
    local pos
    local x
    local y
    local collided
    local elapsed
    local do_fall 0
    local do_move 0

;    call count_fps

    cmp curpiece 0
    jumpn have_piece
        move curpiece get_random
        mod  curpiece PIECEINFO_PIECES
        add  curpiece 1
        move currotation 0
        move ypos 0
        call populate_piece_values2 curpiece currotation pos width height
        move xpos PIT_WIDTH
        sub  xpos width
        div  xpos 2
    label have_piece

    call check_timer elapsed PIECE_TIMER_ID
    cmp elapsed 0
    jumpz check_input
    move do_fall 1

    label check_input
    call check_timer elapsed INPUT_TIMER_ID
    cmp elapsed 0
    jumpz check_do_fall

    cmp move 0
    jumpl tap_left
    jumpg tap_right
    jump check_held

    label tap_left
        move do_move -1
        move tapped TAP_DELAY
        add move 1
    jump check_fall

    label tap_right
        move do_move 1
        move tapped TAP_DELAY
        sub move 1
    jump check_fall

    label check_held
        cmp tapped 0
        jumpn tapped
        move do_move held
    jump check_fall

    label tapped
        sub tapped 1

    label check_fall
        cmp fall 0
        jumpz check_movement
        move do_fall 1

    label check_movement
        cmp do_move 0
        jumpl move_left
        jumpg move_right
    jump check_do_fall

    label move_left
        move x xpos
        sub  x 1
        call piece_would_collide collided curpiece currotation x ypos
        cmp collided 0
        jumpn check_do_fall
        move xpos x
    jump check_do_fall

    label move_right
        move x xpos
        add  x 1
        call piece_would_collide collided curpiece currotation x ypos
        cmp collided 0
        jumpn check_do_fall
        move xpos x
 
    label check_do_fall
        cmp do_fall 0
    jumpz done_update

        move y ypos
        add  y 1
        call piece_would_collide collided curpiece currotation xpos y
        cmp collided 0
    jumpn collision
        move ypos y
        call reset_timer PIECE_TIMER_ID
    jump done_update

    label collision
        call update_pit_map curpiece currotation xpos ypos
        call update_pit_tilemaps_from_piece curpiece currotation xpos ypos
        ; signal piece reset
        move curpiece 0

    label done_update
        move gfx_draw_layer window_background_layer_id
        call draw_pit
        move x xpos
        mul  x TILE_SIDE
        add  x pitxpos
        move y ypos
        mul  y TILE_SIDE
        add  y pitypos
        call draw_piece block_layer_id curpiece currotation x y

    label end
ret

proc event
    local pos
    local width
    local height
    local oldheight
    local newrotation
    local x
    local y
    local collided

    cmp event_get_type INPUT_TYPE_KEYDOWN
    jumpn keyup
    cmp event_get_button INPUT_KEY_f
    jumpz toggle_fullscreen
    cmp event_get_button INPUT_KEY_ESCAPE
    jumpz quit
    cmp event_get_button INPUT_KEY_a
    jumpz move_left
    cmp event_get_button INPUT_KEY_d
    jumpz move_right
    cmp event_get_button INPUT_KEY_w
    jumpz rotate
    cmp event_get_button INPUT_KEY_s
    jumpz fall
    jump end

    label toggle_fullscreen
        call toggle_fullscreen
        call update_scale
    jump end

    label quit
        move set_running 0
    jump end

    label move_left
        cmp move 0
        jumpg end
        sub move 1
        move held -1
    jump end

    label move_right
        cmp move 0
        jumpl end
        add move 1
        move held 1
    jump end

    ; TODO allow kicking off of piece or the wall
    label rotate
        move newrotation currotation
        add  newrotation 1
        cmp  newrotation 4
        jumpl nowrap
            move newrotation 0
        label nowrap
        call populate_piece_values2 curpiece currotation pos width oldheight
        call populate_piece_values2 curpiece newrotation pos width height
        sub oldheight height
        ; oldheight will be the negative growth in height
        move y ypos
        move x xpos
        add width xpos
        cmp width PIT_WIDTH
        jumpl no_fix_width
        jumpz no_fix_width
        move x     PIT_WIDTH
        sub  width xpos
        sub  x     width
        label no_fix_width
        call piece_would_collide collided curpiece newrotation x y
        cmp collided 0
        jumpn check_height
        jump copy_new
        label check_height
        sub y 1
        ; don't check y < 0
        jumpl end
        add oldheight 1
        jumpg end
        jump no_fix_width
        label copy_new
        move currotation newrotation
        move xpos x
        move ypos y
    jump end

    label fall
        move fall 1
    jump end

    label keyup
    cmp event_get_type INPUT_TYPE_KEYUP
    jumpn end
    cmp event_get_button INPUT_KEY_a
    jumpz no_move_left
    cmp event_get_button INPUT_KEY_d
    jumpz no_move_right
    cmp event_get_button INPUT_KEY_s
    jumpz nofall
    jump end

    label no_move_left
        cmp held 0
        jumpg end
        move held 0
    jump end

    label no_move_right
        cmp held 0
        jumpl end
        move held 0
    jump end

    label nofall
        move fall 0
    jump end
 
    label end
ret
